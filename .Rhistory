arrange(mergedData, desc(RankGDP))[13]
mergedData2 <- arrange(mergedData, desc(RankGDP))
select(mergedData2, 13)
View(mergedData2)
mergedData2$Country Name[13]
mergedData2$`Country Name`[13]
? group
?group_by
by_Income <- group_by(mergedData, Income.Group)
View(by_Income)
tapply(mergedData$RankGDP, mergedData$Income.Group, mean)
?quantile
?cut2
install.packages("Hmisc")
library(Hmisc)
?cut2
cuttedData <- cut2(mergedData$RankGDP, g = 5)
mergedData$RankGroups <- cut2(mergedData$RankGDP, g = 5)
table(mergedData$RankGroups, mergedData$Income.Group)
getwd()
?filter
getwd()
dataVotes <- data.table(read.csv("./data/RawVotingdata.tab"), sep = "tab")
library(data.table)
?read.csv
dataVotes <- data.table(read.csv("./data/RawVotingdata.tab"), sep = "\t", stringsAsFactors = FALSE)
View(dataVotes)
dataVotes <- data.table(read.csv("./data/RawVotingdata.tab", sep = "\t", stringsAsFactors = FALSE))
View(dataVotes)
votes %>%
filter(votes <= 3)
library(dplyr)
votes %>%
filter(votes <= 3)
vote %>%
filter(vote <= 3)
dataVotes %>%
filter(vote <= 3)
daaVotes %>%
mutate(year = session + 1945)
dataVotes %>%
mutate(year = session + 1945)
View(dataVotes)
dataVotes %>%
filter(vote <= 3)
install.packages("countrycode")
library(countrycode)
countrycode(100, "cown", "country.name")
votes_processed <- dataVotes %>%
filter(vote <= 3) %>%
mutate(year = session + 1945,
country = countrycode(ccode, "cown", "country.name"))
View(dataVotes)
View(votes_processed)
votes_processed
votes_processed %>%
summarize(total = n())
votes_processed %>%
summarize(total = n(),
percentage_yes = mean(vote==1))
votes_processed %>%
group_by(year)%>%
summarize(total = n(),
percentage_yes = mean(vote==1))
?group_by
votes_processed %>%
group_by(country)%>%
summarize(total = n(),
percentage_yes = mean(vote==1))
by_country <-votes_processed %>%
group_by(country)%>%
summarize(total = n(),
percentage_yes = mean(vote==1))
by_country%>%
arrange(percentage_yes)
rm(list=ls())
infinity = 10000
x <- seq(120, 240, length = infitity)
x <- seq(120, 240, length = infinity)
y <- dnorm(x, 180, 10)
plot(x, y, type = 'l', +
xlab = 'x', ylab = 'density')
plot(x, y, type = "l", +
xlab = "x", ylab = "density")
?plot
plot(x, y, type = "l", xlab = "x", ylab = "density")
abline(v = 180, lwd = 2, col ="blue")
set.seed(79)
population <- rnorm(N, 180,10)
N = 501
set.seed(79)
population <- rnorm(N, 180,10)
abline(v = mean(population), lwd = 4, col = "red", lty = 2)
X <- sample(population, 30)
abline(v = mean(X), lty = 3)
fileUrl <- "https://data.baltimorecity/gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "auto")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "auto")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames = strsplit(names(cameraData), "\\.") #split .
splitNames[[5]]
splitNames[[6]
splitNames[[6]]
splitNames[[6]]
myList <-list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5)
myList <-list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
myList <-list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(myList)
myList[1]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply((splitNames, firstElement()))
sapply(splitNames, firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv", method = "auto")
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl2, destfile = "./data/solutions.csv", method = "auto")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
sub("_", "", names(reviews))
testName <- "this_is_a_test"
sub("_", "", testName)
gsub("_","",testName)
grep("Alameda", cameraData$intersection)
table(grepl("Alemeda", cameraData$intersection))
table(grepl("Alemeda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection)]
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection),]
grep("Alameda", cameraData$intersection, value = TRUE)
install.packages("stringr")
library(stringr)
nchar("Marcelo Medre")
substr("Marcelo Medre", 1, 7)
paste("Marcelo", "Medre")
paste0("Marcelo", "Medre") #paste with no spaces
str_trim("marcelo      ")
library(dplyr)
?unzip
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./data/GaCdProj.zip", method = "auto")
unzip("./data/GaCdProj.zip")
?list.files
list.file("./data")
list.files("./data")
?unzip
unzip("./data/GaCdProj.zip", exdir = "./data/Project")
list.files("./data/Project")
list.files("./data/Project/UCI HAR Dataset/")
x_train <- data.table(read.csv("./data/Project/UCI HAR Dataset/train/X_train.csv"))
x_train <- read.table(read.csv("./data/Project/UCI HAR Dataset/train/X_train.csv"))
x_train <- read.table("./data/Project/UCI HAR Dataset/train/X_train.csv")
x_train <- read.table("./data/Project/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./data/Project/UCI HAR Dataset/train/y_train.txt")
x_test <- read.table("./data/Project/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./data/Project/UCI HAR Dataset/test/y_test.txt")
subjecttrain <- read.table("./data/Project/UCI HAR Dataset/train/subject_train.txt") #import subject_train data
View(subjecttrain)
View(x_train)
?rbind
?merge()
dataTrain <- rbind(x_train,subjecttrain,y_train)
dataTrain <- cbind(x_train,subjecttrain,y_train)
subjecttest <- read.table("./data/Project/UCI HAR Dataset/test/subject_test.txt") #import subject_test data
dataTest <- cbind(x_test,subjecttest,y_test)
fullData <- rbind(dataTrain,dataTest)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets =.~drv)
qplot(hwy, data = mpg, facets =drv ~, bindwidth = 2)
qplot(hwy, data = mpg, facets =drv ~., bindwidth = 2)
maacs
install.packages("nlme")
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
rm(list = ls())
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(w,y, col = "blue", pch = 19, cex = 2)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x+0.05, y0+0.05, labels = as.characters(1:12))
text(x + 0.05, y + 0.05, labels = as.characters(1:12))
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame( x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
mplClust <- function(hclust, lab = hclust$labels, lab.col=rep(1, length(hclust$labels)),
hang = 0.1, ...) {
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x=x, y = y[hclust$order] - (max(hclust$height)*hang), labels=lab[hclust$order],
col = lab.col[hclust$order], srt=90, adj = c(1,0.5), xpd=NA, ...)
}
mplClust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatma(dataMatrix)
heatmap(dataMatrix)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2 )
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObjs2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1],yaxt = "n")
image(t(dataMatrix)[,order(kmeansObjs2$cluster)],yaxt = "n")
setwd("C:/Users/Marcelo/Documents/Marcelo/PÃ³s-Doc/Dados/EoS SO2")
rm(list = ls())
rmse <- function(error)
{
sqrt(mean(error^2))
}
library(data.table)
library(dplyr)
library(ggplot2)
train <- read.table("data_train.txt", sep = " ", header = F, stringsAsFactors = F)
train <- train[,1:3]
names(train) <- c("temp", "pressao", "densid")
test <- read.table("data_test.txt", sep = " ", header = F, stringsAsFactors = F)
test <- test[,1:3]
names(test) <- c("temp", "pressao", "densid")
fulldata <- rbind(train, test)
95/362
library(caTools)
set.seed(123)
View(fulldata)
split = sample.split(fulldata$temp, SplitRatio = 0.75)
train <- subset(fulldata, split == TRUE)
test <- subset(fulldata, split == FALSE)
split2 = sample.split(train$temp, SplitRatio = 0.85)
train_nn <- subset(train, split2 == TRUE)
val_nn <- subset(train, split2 == FALSE)
library(e1071)
system.time(model_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 400, cross = 5, epsilon = 0.2))
model_svm$call
model_svm$type
model_svm$kernel
model_svm$cost
model_svm$degree
model_svm$cost[1]
model_svm$cost[[1]]
model_svm$coefs
model_svm$residuals
model_svm$MSE
model_svm$tot.MSE
svm_val <- predict(model_svm, val_nn[1:2])
error <- val_nn$densid - svm_val
RMSE <- rmse(error)
RMSE
tuneResult <- tune(svm, densid ~ . , data = train_nn,scale = TRUE, kernel = 'radial',
cachesize = 400, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(tuneResult)
plot(tuneResult)
?svm
tuneResult <- tune(svm, densid ~ . , data = train_nn,scale = TRUE, kernel = 'radial',
cachesize = 400, ranges = list(epsilon = seq(0,0.4,0.01), cost = 2^(2:9)))
print(tuneResult)
plot(tuneResult)
tuneModel <- tuneResult$best.model
summary(tuneModel)
tuneModelY <- predict(tuneModel, val_nn[1:2])
errorTunedModel <- val_nn$densid - tuneModelY
tunedModelRMSE <-rmse(errorTunedModel)
tunedModelRMSE
results_val_tuned_Model <- as.data.frame(cbind(val_nn, tuneModelY))
names(results_val_tuned_Model) <- c("temp", "pressao", "densid", "test.svm")
ggplot(results_val_tuned_Model, aes(x = 1:nrow(val_nn), y = densid))+
geom_point()+
geom_point(aes(y = test.svm), col = "red")+
xlab("Amostras ValidaÃ§Ã£o")+
ylab("Densidade")
tunedModel_test <- predict(tuneModel, test[1:2])
error_test <- test$densid - tunedModel_test
error_testRMSE <-rmse(error_test)
error_testRMSE
results_test <- as.data.frame(cbind(test, tunedModel_test))
names(results_test) <- c("temp", "pressao", "densid", "test.svm")
ggplot(results_test, aes(x = 1:nrow(test), y = densid))+
geom_point()+
geom_point(aes(y = test.svm), col = "red")+
xlab("Amostras Teste")+
ylab("Densidade / kg.m-3")
ggplot(results_test, aes(x = temp, y = densid))+
geom_point()+
geom_point(aes(y = test.svm), col = "red")+
xlab("Temperatura / K")+
ylab("Densidade / kg.m-3")
ggplot(results_test, aes(x = pressao, y = densid))+
geom_point()+
geom_point(aes(y = test.svm), col = "red")+
xlab("PressÃ£o / MPa")+
ylab("Densidade / kg.m-3")
pkgs <-c("foreach", "doParallel")
lapply(pkgs, require, character.only = T)
registerDoParallel(cores = 4)
df2 <- train
x <- paste("temp + pressao")
fml <- as.formula(paste("as.factor(densid) ~ ", x))
library(caret)
library(nloptr)
set.seed(2016)
df2$fold <- caret::createFolds(1:nrow(df2), k = 4, list = FALSE)
cost <- c(10, 100)
gamma <- c(1, 2)
parms <- expand.grid(cost = cost, gamma = gamma)
result <- foreach(i = 1:nrow(parms), .combine = rbind) %do% {
c <- parms[i, ]$cost
g <- parms[i, ]$gamma
### K-FOLD VALIDATION ###
out <- foreach(j = 1:max(df2$fold), .combine = rbind, .inorder = FALSE) %dopar% {
deve <- df2[df2$fold != j, ]
test <- df2[df2$fold == j, ]
mdl <- e1071::svm(fml, data = deve, type = "eps-regression", kernel = "radial",
cost = c, gamma = g)
pred <- predict(mdl, test, decision.values = TRUE, probability = TRUE)
data.frame(y = test$DEFAULT, prob = attributes(pred)$probabilities[, 2])
}
### CALCULATE SVM PERFORMANCE ###
roc <- pROC::roc(as.factor(out$y), out$prob)
data.frame(parms[i, ], roc = roc$auc[1])
}
costs <- seq(from = 0.05, to = 0.4, by = 0.005)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
costs <- seq(from = 0.001, to = 0.1, by = 0.0001)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
costs <- seq(from = 100, to = 500, by = 1)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
costs <- seq(from = 0, to = 500, by = 1)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
costs <- seq(from = 1, to = 500, by = 1)
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
plot(costs, pseudor2, type = "l")
costs <- seq(from = 1, to = 500, by = 1)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- val_nn$densid - pred.tuned_svm
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.03, gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- sum((val_nn$densid - pred.tuned_svm)^2)
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
epsilons <- seq(from = 0, to = 1, by = 0.1)
pseudor2 <- double(length(costs))
for (ep in 1:length(epsilons)){
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = epsilons[ep], gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- sum((val_nn$densid - pred.tuned_svm)^2)
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
}
plot(costs, pseudor2, type = "l")
epsilons <- seq(from = 0, to = 1, by = 0.01)
pseudor2 <- double(length(costs))
for (ep in 1:length(epsilons)){
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = epsilons[ep], gamma = 0.5,
shirinking = TRUE, tolerance = 0.1, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- sum((val_nn$densid - pred.tuned_svm)^2)
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
}
plot(costs, pseudor2, type = "l")
for (ep in 1:length(epsilons)){
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = epsilons[ep], gamma = 0.5,
shirinking = TRUE, tolerance = 0.01, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- sum((val_nn$densid - pred.tuned_svm)^2)
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
}
plot(costs, pseudor2, type = "l")
costs <- seq(from = 1, to = 500, by = 1)
pseudor2 <- double(length(costs))
for (c in 1:length(cost)){
tuned_svm <- svm(densid ~ . , data = train_nn, scale = TRUE, kernel = 'radial',
cachesize = 800, cost = costs[c], epsilon = 0.3, gamma = 0.5,
shirinking = TRUE, tolerance = 0.001, fitted = TRUE)
#prediction
pred.tuned_svm <- predict(tuned_svm, val_nn[1:2])
errorTunedModel <- sum((val_nn$densid - pred.tuned_svm)^2)
RMSE <-rmse(errorTunedModel)
pseudor2[c] <- RMSE
}
plot(costs, pseudor2, type = "l")
